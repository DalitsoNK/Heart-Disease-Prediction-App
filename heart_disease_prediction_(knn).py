# -*- coding: utf-8 -*-
"""HEART DISEASE PREDICTION (KNN)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tbUuhlz6Wk29_nOwj1rNXOQ58bfnxigY
"""

# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import accuracy_score
import pickle

"""MOUNT GOOGLE DRIVE"""

from google.colab import drive
drive.mount ('/content/drive')

"""LOCATE THE FILE IN GOOGLE DRIVE"""

# Load the dataset
import pandas as pd
df = pd.read_csv('/content/drive/MyDrive/Medical informatics/heart.csv')
df.head(10)

#setting an output value (Y value)
output=df.HeartDisease
output.head()

# Data Preprocessing / Converting categorical variables into numerical variables
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
sex=le.fit_transform(df.Sex) #1=Male, 0=Female
chestPainType=le.fit_transform(df.ChestPainType)
restingECG=le.fit_transform(df.RestingECG)
excerciseAngina=le.fit_transform(df.ExerciseAngina)
st_slope=le.fit_transform(df.ST_Slope)

# Dropping categorical variables from df
inputs=df.drop(columns=['Sex','ChestPainType','RestingECG','ExerciseAngina','ST_Slope','HeartDisease'])

# Adding new columns to the dataFrame
inputs['Sex']=sex
inputs['ChestPainType']=chestPainType
inputs['RestingECG']=restingECG

inputs['ExerciseAngina']=excerciseAngina
inputs['ST_Slope']=st_slope
inputs.head(10)

#spliting data into train and test
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(inputs, output, test_size=0.2, random_state=42)

# Define the parameter grid to search over
param_grid = {'n_neighbors': [3, 5, 7, 9, 11],
              'weights': ['uniform', 'distance'],
              'p': [1, 2]}
              
knn = KNeighborsClassifier()

# Perform grid search to find the best hyperparameters
grid_search = GridSearchCV(knn, param_grid, cv=5)
grid_search.fit(X_train, y_train)

# Print the best hyperparameters and accuracy score
print("Best hyperparameters: ", grid_search.best_params_)
print("Training accuracy: ", grid_search.best_score_)
print("Testing accuracy: ", accuracy_score(y_test, grid_search.predict(X_test)))

# Define the file path to save the pickle file
file_path = '/content/drive/MyDrive/Medical informatics/knn_model.pkl'

# Open the file in write binary mode
with open(file_path, 'wb') as file:
    # Serialize and write the trained model to the file
    pickle.dump(grid_search.best_estimator_, file)

# Confirm that the pickle file has been saved
print("The model has been saved as a pickle file in Google Drive.")