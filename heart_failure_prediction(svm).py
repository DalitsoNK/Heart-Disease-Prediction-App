# -*- coding: utf-8 -*-
"""HEART FAILURE PREDICTION(SVM)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O3WB36Z0w6reVTOATzsUzryHCgv5Izbt
"""

#importing neccessary modules
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import sklearn
from sklearn.model_selection import learning_curve
from sklearn.model_selection import cross_val_score
from sklearn.svm import SVC
from sklearn import svm

from google.colab import drive
drive.mount ('/content/drive')

# Load the dataset
import pandas as pd
df = pd.read_csv('/content/drive/MyDrive/Medical informatics/heart.csv')
df.head(10)

#setting an output value (Y value)
output=df.HeartDisease
output.head()

#Converting categorical variables into numerical variables
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()

sex=le.fit_transform(df.Sex) #1=Male, 0=Female
chestPainType=le.fit_transform(df.ChestPainType)
restingECG=le.fit_transform(df.RestingECG)
excerciseAngina=le.fit_transform(df.ExerciseAngina)
st_slope=le.fit_transform(df.ST_Slope)

#dropping categorical variables from df
inputs=df.drop(columns=['Sex','ChestPainType','RestingECG','ExerciseAngina','ST_Slope','HeartDisease'])
inputs.head()

#Adding new columns to the dataFrame
inputs['Sex']=sex
inputs['ChestPainType']=chestPainType
inputs['RestingECG']=restingECG
inputs['ExerciseAngina']=excerciseAngina
inputs['ST_Slope']=st_slope
inputs.head()

#spliting data into train and test
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(inputs, output, test_size=0.2, random_state=42)

from sklearn.svm import SVC
from sklearn.model_selection import GridSearchCV

# Create an SVM classifier
clf = SVC(kernel='linear')

# Define the grid of hyperparameters to search
param_grid = {
    'C': [0.1, 1, 10],
    'gamma': [0.1, 1, 10]
}

# Create a GridSearchCV object to find the best hyperparameters
grid_search = GridSearchCV(clf, param_grid, cv=5)

# Train the classifier on the training set
grid_search.fit(X_train, y_train)

# Get the best hyperparameters and train the final model on the entire training set
best_params = grid_search.best_params_
final_clf = SVC(kernel='linear', C=best_params['C'], gamma=best_params['gamma'])
final_clf.fit(X_train, y_train)

# Predict the labels of the test set
y_pred = final_clf.predict(X_test)

# Calculate the accuracy of the classifier on the test set
accuracy = final_clf.score(X_test, y_test)

# print the training score
print("Training score:", final_clf.score(X_train, y_train))

# print the test score
print("Test score:", final_clf.score(X_test, y_test))

# get the weights assigned to each feature
#weights = final_clf.coef_

# get the distances of each sample to the hyperplane
#distances = final_clf.decision_function(X_test)

# compute the hyperplane intercept
#intercept = -np.mean(distances)

#print("Weights:", weights)
#print("Intercept:", intercept)

#clf.fit(X_train, y_train)
#clf.dual_coef_

import pickle
from sklearn.model_selection import GridSearchCV
# Define the file path to save the pickle file
file_path = '/content/drive/MyDrive/Medical informatics/svm_model.pkl'

# Open the file in write binary mode
with open(file_path, 'wb') as file:
    # Serialize and write the trained model to the file
    pickle.dump(grid_search.best_estimator_, file)

# Confirm that the pickle file has been saved
print("The model has been saved as a pickle file in Google Drive.")